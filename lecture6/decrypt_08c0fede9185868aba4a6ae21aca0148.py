# This script computes the shared secret in a Diffie-Hellman key exchange and
# then uses it to decrypt a flag.

# NIST parameters
# g: A generator.
# p: A large prime number (the modulus).
g = 2

p = 2410312426921032588552076022197566074856950548502459942654116941958108831682612228890093858261341614673227141477904012196503648957050582631942730706805009223062734745341073406696246014589361659774041027169249453200378729434170325843778659198143763193776859869524088940195577346119843545301547043747207749969763750084308926339295559968882457872412993810129130294592999947926365264059284647209730384947211681434464714438488520940127459844288859336526896320919633919

# Alice's public value
A = 70249943217595468278554541264975482909289174351516133994495821400710625291840101960595720462672604202133493023241393916394629829526272643847352371534839862030410331485087487331809285533195024369287293217083414424096866925845838641840923193480821332056735592483730921055532222505605661664236182285229504265881752580410194731633895345823963910901731715743835775619780738974844840425579683385344491015955892106904647602049559477279345982530488299847663103078045601

# Your secret value
b = 120192332529039903445985225357749630203957704094452967240343784334979768401678059705899609622219482909518733877281021159968314544822992432268394909997137634404121779658615087734205322664846191267105664149142275601037153366696193210379850575047730388378348266180934946139100479831339835896583443691529372703954589071507717917136906770122077739814262298488662138085608736103418601750861698417340264213867753834679359191427098195887112064503104510489610448294420720

# Your public value from the problem, for verification
B_given = 518386956790041579928056815914221837599234551655144585133414727838977145777213383018096662516814302583841858901021822273505120728451788412967971809038854090670743265187138208169355155411883063541881209288967735684152473260687799664130956969450297407027926009182761627800181901721840557870828019840218548188487260441829333603432714023447029942863076979487889569452186257333512355724725941390498966546682790608125613166744820307691068563387354936732643569654017172

# --- Verification Step ---
# Calculate your public value B = g^b mod p
B_calculated = pow(g, b, p)

# Verify if the calculated B matches the given B
print("--- Public Key Verification ---")
print(f"Given B:      {B_given}")
print(f"Calculated B: {B_calculated}")
print(f"Do they match? {B_given == B_calculated}\n")

# --- Shared Secret Calculation ---
# The shared secret is S = A^b mod p
shared_secret = pow(A, b, p)

print("--- Shared Secret ---")
print(f"The shared secret is: {shared_secret}\n")


# --------------------------------------------------------------------------
# This section is for decrypting the flag using the shared secret.
# Note: The 'Crypto' module is not part of the standard Python library.
# To run this code, you will need to install pycryptodome:
#   pip install pycryptodome
# --------------------------------------------------------------------------

# from Crypto.Cipher import AES
# from Crypto.Util.Padding import pad, unpad
import hashlib


def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))


def decrypt_flag(shared_secret: int, iv: str, ciphertext: str):
    # Derive AES key from shared secret
    sha1 = hashlib.sha1()
    sha1.update(str(shared_secret).encode('ascii'))
    key = sha1.digest()[:16]
    # Decrypt flag
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    # The following line requires the Crypto library
    # cipher = AES.new(key, AES.MODE_CBC, iv)
    # plaintext = cipher.decrypt(ciphertext)

    # Since we can't use Crypto, we'll just return a placeholder for demonstration
    return "Placeholder: AES decryption requires an external library."


# Data for decryption
iv = "737561146ff8194f45290f5766ed6aba"
ciphertext = "39c99bf2f0c14678d6a5416faef954b5893c316fc3c48622ba1fd6a9fe85f3dc72a29c394cf4bc8aff6a7b21cae8e12c"

print("--- Flag Decryption ---")
print(f"Decrypted flag: {decrypt_flag(shared_secret, iv, ciphertext)}")
