import math
import hashlib

def get_gcd(a, b):
    return math.gcd(a, b)

def get_congruent_numbers_with_mod(a, mod):
    return [x for x in range(mod) if x % mod == a % mod]

def calc_modulous_of_number_with_exponent(base, exponent, mod):
    return pow(base, exponent, mod)

def RSA_encrypt(message, e, n):
    return calc_modulous_of_number_with_exponent(message, e, n)

def Calc_n(p, q):
    return p * q

def Eulers_totient_function(p, q):
    return (p - 1) * (q - 1)

def Find_private_key(e, phi):
    d = pow(e, -1, phi)
    return d

def RSA_decrypt(ciphertext, d, n):
    return calc_modulous_of_number_with_exponent(ciphertext, d, n)


def sign_message_with_sha256(message, d, n):
    hash_object = hashlib.sha256(message.encode())
    hash_hex = hash_object.hexdigest()
    hash_int = int(hash_hex, 16)
    signature = calc_modulous_of_number_with_exponent(hash_int, d, n)
    return signature

if __name__ == "__main__":
    print(get_gcd(66528, 52920))
    print(get_congruent_numbers_with_mod(11, 6))
    print(get_congruent_numbers_with_mod(8146798528947, 17))
    print(calc_modulous_of_number_with_exponent(273246787654, 65536, 65537))
    print(calc_modulous_of_number_with_exponent(2, 10, 1000))
    print("Modular exponentiation")
    print(calc_modulous_of_number_with_exponent(101, 17, 22663))
    print("Public keys")
    print(RSA_encrypt(12, 65537, Calc_n(17, 23)))
    print("Eulers totient function")
    print(Eulers_totient_function(857504083339712752489993810777, 1029224947942998075080348647219))
    print("Private keys")
    print(Find_private_key(65537, Eulers_totient_function(857504083339712752489993810777, 1029224947942998075080348647219)))
    print("RSA decryption")
    print(RSA_decrypt(77578995801157823671636298847186723593814843845525223303932, Find_private_key(65537, Eulers_totient_function(857504083339712752489993810777, 1029224947942998075080348647219)), 882564595536224140639625987659416029426239230804614613279163))
    print("RSA signatures")
    print(sign_message_with_sha256("crypto{Immut4ble_m3ssag1ng}", 11175901210643014262548222473449533091378848269490518850474399681690547281665059317155831692300453197335735728459259392366823302405685389586883670043744683993709123180805154631088513521456979317628012721881537154107239389466063136007337120599915456659758559300673444689263854921332185562706707573660658164991098457874495054854491474065039621922972671588299315846306069845169959451250821044417886630346229021305410340100401530146135418806544340908355106582089082980533651095594192031411679866134256418292249592135441145384466261279428795408721990564658703903787956958168449841491667690491585550160457893350536334242689, 15216583654836731327639981224133918855895948374072384050848479908982286890731769486609085918857664046075375253168955058743185664390273058074450390236774324903305663479046566232967297765731625328029814055635316002591227570271271445226094919864475407884459980489638001092788574811554149774028950310695112688723853763743238753349782508121985338746755237819373178699343135091783992299561827389745132880022259873387524273298850340648779897909381979714026837172003953221052431217940632552930880000919436507245150726543040714721553361063311954285289857582079880295199632757829525723874753306371990452491305564061051059885803))
    
    

    
